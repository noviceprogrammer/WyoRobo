/*
    @author Benjamin Chen
    Latest Change: 9/29
    Notes: Messed around with the game to see how it works. Debris are not randomly 
           numbered. First four are numbered 0-3, second four 4-7, and last three 8-10.
           
           Needs to implement navigation
*/



//Declare any variables shared between functions here

float myState[12];
float debris[41][4];
float targetPosi[3];
int n;
float tolerance;
float distance;
int inc;
int step;
float att[3];
float targetRate[3];
int counter;
float stop[3];
float otherEulerState[12];
float otherEuler[3];
float myEuler[3];
float targetEuler[3];
float optimalCoords[3];
float otherState[12];

void init(){
	//This function is called once when your code is first loaded.
	game.getDebris(debris);
	
	n = 16;
	inc = 0;
	step = 1;
	
	counter = 0;
	
	stop[0] = 0.0;
	stop[1] = 0.0;
	stop[2] = 0.0;


	tolerance = 0.05;
	
	distance = 0.0;
}

/*

float calcDistance(float x1, float y1, float z1, float x2, float y2, float z2)
{
    float num = 0;
    num = sqrtf(powf((x1-x2), 2) + powf((y1-y2), 2) + powf((z1-z2), 2));
    return num;
}

float calcDistance2(float x1, float y1, float x2, float y2)
{
    return sqrtf(powf((x1-x2), 2) + powf((y1-y2), 2));
}


void calcPosi()
{
    float index[4] = {5, 6, 9, 10};
    float max = 0;

    for (int i = 5; i < 11; i++)
    {
        if (calcDistance2(debris[i][0], debris[i][1], debris[i][0], debris[i][1]) > max)
            {
                max = calcDistance2(debris[i][0], debris[i][1], debris[i+1][0], debris[i+1][1]);
                optimalCoords[0] = (debris[i][0] + debris[i][0]) / 2;
                optimalCoords[1] = (debris[i][1] + debris[i][1]) / 2;
                optimalCoords[2] = debris[i][2];
            }
        if (i == 6)
            i = 8;
            
    }
    
}

*/


	
void goToPosition( float posn[] , float tolerance, int inc) {
    float err = fabsf(myState[0]-posn[0]) + fabsf(myState[1]-posn[1]) + fabsf(myState[2] - posn[2]);

    if (err > tolerance)
        api.setPositionTarget(posn);
    else if (inc)
        step++;

}
	
	


void loop(){
	//This function is called once per second.  Use it to control the satellite.
	
	api.getMyZRState(myState);
	api.getOtherZRState(otherState);
	game.getOtherEulerState(otherEulerState);
	
	otherEuler[0] = otherEulerState[6];
	otherEuler[1] = otherEulerState[7];
	otherEuler[2] = otherEulerState[8];
	
	DEBUG(("Step %d", step));
	DEBUG(("Rendezvous Status: %d", game.checkRendezvous()));
	DEBUG(("IsHooked: %d", game.getHooked()));
	
    switch(step) {
        
        //Goto position
        case 1: 
          
        	targetPosi[0] = 0.55;
	        targetPosi[1] = 0.7;
        	targetPosi[2] = 0.55;
	
	        goToPosition(targetPosi, tolerance, 1);
            
        break;
        
        case 2:
        
            targetRate[0] = 60 * PI/180;
            targetRate[1] = 0.0;
            targetRate[2] = 0.0;
            
            if (counter < 5)
            {
                api.setAttRateTarget(targetRate);
                counter++;
            }
            else
            {
                api.setAttRateTarget(stop);
            }
            
            targetPosi[0] = 0.55;
	        targetPosi[1] = -0.1;
        	targetPosi[2] = 0.55;
	

	        goToPosition(targetPosi, tolerance, 1);
        
        break;
    
        case 3:
        
            targetPosi[0] = 0;
	        targetPosi[1] = -0.17;
        	targetPosi[2] = 0.25;
	
	        goToPosition(targetPosi, tolerance, 0);
	        
	        game.completeRendezvous();
	        
	        if (game.getRendezvous())
	        {
	            step++;
	            counter = 0;
	        }
	        
	   break;
	   
	   case 4:
	   
	        targetEuler[0] = otherEuler[0] + PI;
	        targetEuler[1] = otherEuler[1] + PI + PI / 10;;
	        targetEuler[2] = otherEuler[2];
	        
	        game.setEulerTarget(targetEuler);
            
            targetPosi[0] = otherState[0];
            targetPosi[1] = otherState[1] + 0.3285;
            targetPosi[2] = otherState[2];
            
	        
	       
	        tolerance = 0.01;
	   
	       goToPosition(targetPosi, tolerance, 0);
	       
	       if (game.getHookCollision())
	       {
	           targetEuler[2] -= 3;
	       }
	        
	        
	        
	        
	        
	        if (game.getHooked())
	        {
	            //step++;
	        }
	   
	   break;
	   
	   case 5:
	   
	        targetEuler[0] = otherEuler[0] + PI;
	        targetEuler[1] = otherEuler[1] + PI;;
	        targetEuler[2] = otherEuler[2];
	        
	        game.setEulerTarget(targetEuler);
	        
	        
	        tolerance = 0.01;
	       
	        goToPosition(targetPosi, tolerance, 0);
	        
	   break;
	   
	        
    }

	
}


